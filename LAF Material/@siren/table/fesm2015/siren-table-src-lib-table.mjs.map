{"version":3,"file":"siren-table-src-lib-table.mjs","sources":["../../../projects/table/src/lib/table/enums/siren-table-filter-value.enum.ts","../../../projects/table/src/lib/table/data-source/siren-datasource.ts","../../../projects/table/src/lib/table/data-source/siren-fe-datasource.ts","../../../projects/table/src/lib/table/directive/custom-template.directive.ts","../../../projects/table/src/lib/table/enums/siren-table-action.enum.ts","../../../projects/table/src/lib/table/directive/ellipsify-me.directive.ts","../../../projects/table/src/lib/table/pipes/custom-template.pipe.ts","../../../projects/table/src/lib/table/table.component.ts","../../../projects/table/src/lib/table/table.component.html","../../../projects/table/src/lib/table/table.module.ts","../../../projects/table/src/lib/table/utils/helpers.ts","../../../projects/table/src/lib/table/data-source/siren-be-datasource.ts","../../../projects/table/src/lib/table/siren-table-src-lib-table.ts"],"sourcesContent":["export enum DefaultFilterValue {\n    DEFAULT_SORT_DIRECTION = '',\n    DEFAULT_SORT_COLUMN = '',\n    DEFAULT_PAGE = 0 ,\n    DEFAULT_PAGE_SIZE = 20,\n    DEFAULT_KEYWORD = ''\n}","import { DataSource } from '@angular/cdk/collections';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { SortDirection } from '@angular/material/sort';\nimport { Observable } from 'rxjs';\nimport { SirenTableData } from '../interfaces/data-table.model';\nimport { SirenTableFilterModel } from '../interfaces/siren-table-filter.model';\n\nexport abstract class SirenDataSource implements DataSource<SirenTableData> {\n\tabstract updatePaginationParams(data: SirenTableFilterModel): void;\n\tabstract updateSortParams(data: SirenTableFilterModel): void;\n\tabstract connect(): Observable<readonly SirenTableData[]>;\n\tabstract disconnect(): void;\n\t/**\n\t * Filters data based on the keywords\n\t * @param keywords current value of the search box\n\t */\n\tabstract filter(keywords: string): void;\n\tprotected abstract sendDataToTable(): void;\n    /**\n     * Selects all rows in the current page.\n     */\n\tabstract selectAllRows(): void;\n    /**\n     * Deselects all rows\n     * @param onlyPaginated true by default.\n     */\n\tabstract deselectAllRows(onlyPaginated?: boolean): void;\n\t/**\n\t * Returns last chosen size of paginator. Default is 20\n\t */\n\tabstract getSize(): number;\n\t/**\n\t * Returns last chosen page of pagination. Default is 0\n\t */\n\tabstract getPage(): number;\n\t/**\n\t * Returns last keyword written in search box when allowFiltering input is true\n\t */\n\tabstract getKeyword(): string;\n\t/**\n\t * Returns the last chosen column to sort data.\n\t * @returns columnDef of the column\n\t */\n\tabstract getSortColumn(): string;\n\t/**\n\t * Returns last chosen direction to sort data\n\t */\n\tabstract getSortDirection(): SortDirection;\n\t/**\n\t * Returns length of data array\n\t */\n\tabstract getCount(): number;\n\t/**\n\t * Returns true if all data in the current page is selected\n\t */\n\tabstract isAllRowsSelected(): boolean;\n    protected selectedRows: Map<string | number,SirenTableData> = new Map();\n    protected data: SirenTableData[] = [];\n\n\t/**\n\t * Swap items when reordering features is enabled.\n\t * Calling this function outside SirenTableComponent doesn't re-render the new order of data\n\t * @param previousIndex\n\t * @param currentIndex\n\t */\n\tpublic swapRows(previousIndex: number, currentIndex: number): void {\n\t\tmoveItemInArray(this.data, previousIndex, currentIndex);\n\t\tthis.sendDataToTable();\n\t}\n\n\t/**\n\t * Returns an array that represent all table's data\n\t */\n\tpublic getData(): SirenTableData[]{\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Returns the index of a row in the table based on selectionId\n\t * @param row an element provided in loadData function of SirenFeDataSource or handleData of SirenDataService\n\t * @returns index of the first element in data array\n\t */\n    public getIndexOf(row: SirenTableData): number {\n        return this.data.findIndex(elem => elem.selectionId === row.selectionId);\n    }\n\n\t/**\n\t * Returns number of selected rows\n\t */\n    public getSelectionCounter(): number{\n\t\treturn this.selectedRows.size;\n\t}\n\n\t/**\n\t * Returns selected rows\n\t */\n\tpublic getSelectedRows(): SirenTableData[] {\n\t\treturn [...this.selectedRows.values()];\n\t}\n\n\t/**\n\t * Selects a row based on selectionId\n\t */\n\tpublic selectRow(row: SirenTableData): void{\n\t\trow.isSelected = true;\n\t\tthis.selectedRows.set(row.selectionId,row);\n\t}\n\t/**\n\t * Deselects a row based on selectionId\n\t */\n\tpublic deselectRow(row: SirenTableData): void {\n\t\trow.isSelected = false;\n\t\tthis.selectedRows.delete(row.selectionId);\n\t}\n\n\t/**\n\t * Returns `true` if a row is selected and `false` otherwise\n\t */\n\tprotected checkSelectedRows(): void{\n\t\tthis.data.forEach( row =>{\n\t\t\tif(this.selectedRows.has(row.selectionId)) { // We need to check if the selectionId is in the selectedRows to know if it is a selected row because isSelected field is set to false with server-side pagination\n\t\t\t\trow['isSelected'] = true;\n\t\t\t} else if (row.isSelected){ // A row that have isSelected true by default should be selected\n\t\t\t\tthis.selectRow(row);\n\t\t\t}\n\t\t});\n\t}\n\n}","import { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort, SortDirection } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Observable } from \"rxjs\";\nimport { DefaultFilterValue } from \"../enums/siren-table-filter-value.enum\";\nimport { SirenTableData } from \"../interfaces/data-table.model\";\nimport { SirenTableFilterModel } from \"../interfaces/siren-table-filter.model\";\nimport { SirenDataSource } from './siren-datasource';\n\nexport class SirenFeDataSource extends SirenDataSource{\n\n    private size: number;\n    private page: number;\n    private keyword: string;\n    private sortColumn: string;\n    private sortDirection: SortDirection;\n    private dataSource = new MatTableDataSource<SirenTableData>();\n    private paginatedData: SirenTableData[];\n    constructor(data: SirenTableData[] = [], config?: SirenTableFilterModel){\n        super();\n        if ( data.length > 0 ){\n            this.loadData(data, config);\n        }\n        this.dataSource.connect().subscribe(data => {\n            if (data) {\n                this.paginatedData = data;\n            }\n        });\n    }\n    connect(): Observable<readonly SirenTableData[]> {\n        return this.dataSource.connect();\n    }\n\n    disconnect(): void {\n        this.dataSource.disconnect();\n    }\n    public getSize(): number {\n        return this.size;\n    }\n    public getPage(): number {\n        return this.page;\n    }\n    public getKeyword(): string {\n        return this.keyword;\n    }\n    public getSortColumn(): string {\n        return this.sortColumn;\n    }\n    public getSortDirection(): SortDirection {\n        return this.sortDirection;\n    }\n\n    public getCount(): number {\n        return this.dataSource.filteredData.length;\n    }\n\n\tpublic isAllRowsSelected(): boolean {\n\t\treturn this.paginatedData?.find(row => row.isSelected === false || row.isSelected === undefined) === undefined;\n\t}\n\n    private loadParams(config: SirenTableFilterModel): void {\n        this.page = config?.page ?? DefaultFilterValue.DEFAULT_PAGE;\n        this.size = config?.size ?? DefaultFilterValue.DEFAULT_PAGE_SIZE;\n        this.sortColumn = config?.sortColumn ?? DefaultFilterValue.DEFAULT_SORT_COLUMN;\n        this.sortDirection = config?.sortDirection ?? DefaultFilterValue.DEFAULT_SORT_DIRECTION;\n        this.keyword = config?.keyword ?? DefaultFilterValue.DEFAULT_KEYWORD;\n    }\n\n    /**\n     * Loads data in the table\n     * @param data array of SirenTableData.\n     * @param config optional object to set initial value for sorting and pagination.\n     */\n    public loadData(data: SirenTableData[], config?: SirenTableFilterModel): void {\n        this.loadParams(config);\n        this.data = data;\n        this.checkSelectedRows();\n        this.sendDataToTable();\n        this.dataSource.filter = this.keyword;\n    }\n\n    /**\n     * Sets the MatPaginator to enable client side pagination.\n     */\n    public setPaginator(paginator: MatPaginator) {\n        this.dataSource.paginator = paginator;\n    }\n    /**\n     * Sets MatSort to enable client side sorting.\n     */\n    public setSort(sort: MatSort): void {\n\t\tthis.dataSource.sort = sort;\n\t}\n\n    /**\n     * Sets page and size of the paginator. It doesn't trigger an ui change.\n     * @param data object that contain page and size\n     */\n    public updatePaginationParams(data: SirenTableFilterModel): void {\n        this.page = data.page;\n        this.size = data.size;\n    }\n    /**\n     * Sets sort colummn and sort direction. It doesn't trigger an ui change.\n     * @param data object that contain sortColumn and sortDirection\n     */\n    public updateSortParams(data: SirenTableFilterModel): void {\n        this.sortColumn = data.sortColumn;\n        this.sortDirection = data.sortDirection;\n    }\n\n    public filter(keywords: string): void {\n        this.page = DefaultFilterValue.DEFAULT_PAGE;\n        this.keyword = keywords;\n        this.dataSource.filter = keywords;\n    }\n\n    protected sendDataToTable(): void {\n        this.dataSource.data = this.data;\n    }\n\n\tpublic selectAllRows(): void {\n\t\tthis.paginatedData.forEach(row => {\n\t\t\tthis.selectRow(row);\n\t\t});\n\t}\n    /**\n     * \n     * @returns array filtered based on keyword in searchBox when allowFiltering input is true\n     */\n    public getFilteredData(): SirenTableData[] {\n        return this.dataSource.filteredData;\n    }\n\n    /**\n     * @returns array of current page data \n     */\n    public getPaginatedData(): SirenTableData[] {\n        return this.paginatedData;\n    }\n\n\tpublic deselectAllRows(onlyPaginated = true): void {\n\t\tconst dataToDeleted = onlyPaginated ? this.paginatedData : this.data;\n        dataToDeleted.forEach(row => this.deselectRow(row));\n\t}\n\n}","import { Directive, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[appCustomCols]'\n})\nexport class CustomColsDirective implements OnInit {\n  constructor(public template: TemplateRef<any>, private viewContainer: ViewContainerRef) { }\n  @Input() appCustomColsColumnDef: string;\n  @Input() appCustomCols: string;\n  ngOnInit(): void {\n    if (this.appCustomCols) {\n      this.viewContainer.createEmbeddedView(this.template);\n    }\n  }\n}\n","export enum SirenTableAction {\n    DELETE = 'DELETE',\n    REORDER = 'REORDER',\n    SELECT = 'SELECT',\n    EXPAND = 'EXPAND'\n}","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { MatTooltip } from '@angular/material/tooltip';\n\n@Directive({\n\tselector: '[matTooltip][appTooltipIfTruncated]'\n})\nexport class EllipsifyMeDirective implements AfterViewInit {\nconstructor(private matTooltip: MatTooltip, private elementRef: ElementRef<HTMLElement>) {}\n\tngAfterViewInit(): void {\n\t\tconst element = this.elementRef.nativeElement;\n\t\tthis.matTooltip.disabled = element.scrollHeight === 0 || element.scrollHeight - element.clientHeight - 2 <= 0;\n\t}\n}","import { Pipe, PipeTransform, QueryList } from '@angular/core';\nimport { CustomColsDirective } from '../directive/custom-template.directive';\n\n@Pipe({\n  name: 'customTemplate'\n})\nexport class CustomTemplatePipe implements PipeTransform {\n\n  transform(customTamplates: QueryList<CustomColsDirective>, columnDef: string): unknown {\n    return customTamplates.find(customTamplate => customTamplate.appCustomColsColumnDef === columnDef).template;\n  }\n\n}\n","import { Component, OnInit, Input, ViewChild, AfterViewInit, Output, EventEmitter, HostListener, OnDestroy, OnChanges, SimpleChanges, ContentChildren, QueryList} from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort, SortDirection } from '@angular/material/sort';\nimport { takeUntil } from 'rxjs/operators';\nimport { SirenTableFilterModel } from './interfaces/siren-table-filter.model';\nimport { SirenTableColumns } from './interfaces/siren-table-columns.model';\nimport { Subject } from 'rxjs';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { MatTable } from '@angular/material/table';\nimport { SirenDataSource } from './data-source/siren-datasource';\nimport {  SirenFeDataSource } from './data-source/siren-fe-datasource';\nimport { SirenTableConfig, SirenTableData } from './interfaces/data-table.model';\nimport { CustomColsDirective } from './directive/custom-template.directive';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { SirenTableAction } from './enums/siren-table-action.enum';\nimport { DefaultFilterValue } from './enums/siren-table-filter-value.enum';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'siren-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.sass'],\n  animations: [\n    trigger('detailExpand', [\n\t\tstate('collapsed, void', style({ height: '0px', minHeight: '0', display: 'none' })),\n\t\tstate('expanded', style({ height: '*' })),\n\t\ttransition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n\t\ttransition('expanded <=> void', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n\t  ])\n  ]\n})\nexport class SirenTableComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n\t@ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n\t@ViewChild(MatSort, { static: false }) sort: MatSort;\n\t@ViewChild('table') table: MatTable<any>;\n\n\t@Output() onSubmitClick = new EventEmitter<SirenTableData[]>();\n\t@Output() onRowClick = new EventEmitter<SirenTableData>();\n\t@Output() onDeleteClick = new EventEmitter<{ row: SirenTableData, index: number}>();\n\t@Output() onReorder = new EventEmitter<any>();\n\n\t@Input() displayedColumns: SirenTableColumns<any>[] = [];\n\tbaseCols: SirenTableColumns<any>[] = [];\n\t@Input() dataSource: SirenDataSource;\n\tpublic readonly sirenTableAction = SirenTableAction;\n\n\t@Input() allowFiltering = false; // Displays search box input above the table\n\n\n\t@Input() allowMultiSelection = false;\n\t@Input() allowSingleSelection = false;\n\t@Input() allowReordering = false;\n\t@Input() withDelete = false;\n\n\t@Input() allowPagination = false;\n\n\t@Input() labels: SirenTableConfig; // Replaces placeholder of submit button, search box, selected items text, no data found\n\n\tprivate readonly _onDestroy = new Subject<void>();\n\tclickedRow: string | number;\n\tdisplayedColumnsWithAction: string[] = [];\n\texpandedCols: SirenTableColumns<SirenTableData>[] = [];\n\texpandedElement = null;\n\tsearchString = '';\n\tinnerHeight = 0;\n\tisAllSelected = false;\n\tselectedRowCounter = 0;\n\tpartialSelection = false;\n\tcount = 0;\n\n\t@ContentChildren(CustomColsDirective) customTemplates: QueryList<CustomColsDirective>;\n\tpage: number;\n\tsize: number;\n\tsortDirection: SortDirection;\n\tsortColumn: string;\n\tprivate previousKeyword = '';\n\n\t@HostListener('window:resize', ['$event'])\n\tonResize(event: any) {\n\t\tthis.innerHeight = window.innerHeight;\n\t}\n\n\tngOnChanges(changes: SimpleChanges): void {\n\t\tif (changes?.displayedColumns?.previousValue){\n\t\t\tthis.loadColumns();\n\t\t}\n\t\tif (changes?.dataSource?.previousValue) {\n\t\t\tthis.connectToDatasource();\n\t\t\tthis.checkDataSourcePaginatorAndSort();\n\t\t}\n\t}\n\tngOnDestroy(): void {\n\t\tthis._onDestroy.next();\n\t\tthis._onDestroy.complete();\n\t}\n\n\tngOnInit(): void {\n\t\tthis.innerHeight = window.innerHeight;\n\t\tthis.loadColumns();\n\t}\n\n\tprivate loadColumns(): void {\n\t\tthis.expandedCols = this.displayedColumns.filter(column => column.expandedData);\n\t\tthis.baseCols = this.displayedColumns.filter(column => !column.expandedData);\n\t\tthis.displayedColumnsWithAction = this.baseCols.map(col => col.columnDef);\n\t\tif (this.expandedCols.length > 0 && !this.displayedColumnsWithAction?.includes(SirenTableAction.EXPAND)) {\n\t\t\tthis.displayedColumnsWithAction?.push(SirenTableAction.EXPAND);\n\t\t}\n\t\tif ((this.allowSingleSelection || this.allowMultiSelection) && !this.displayedColumnsWithAction?.includes(SirenTableAction.SELECT)) {\n\t\t\tthis.displayedColumnsWithAction?.unshift(SirenTableAction.SELECT);\n\t\t}\n\t\tif (this.withDelete && !this.displayedColumnsWithAction?.includes(SirenTableAction.DELETE)) {\n\t\t\tthis.displayedColumnsWithAction?.push(SirenTableAction.DELETE);\n\t\t}\n\t\tif (this.allowReordering && !this.displayedColumnsWithAction?.includes(SirenTableAction.REORDER)) {\n\t\t\tthis.displayedColumnsWithAction?.unshift(SirenTableAction.REORDER);\n\t\t}\n\t}\n\n\tngAfterViewInit(): void {\n\t\tthis.connectToDatasource();\n\t\tthis.checkDataSourcePaginatorAndSort();\n\t}\n\n\tprivate checkDataSourcePaginatorAndSort(): void {\n\t\tif (this.dataSource instanceof  SirenFeDataSource){\n\t\t\tif (this.allowPagination) {\n\t\t\t\tthis.dataSource?.setPaginator(this.paginator);\n\t\t\t}\n\t\t\tthis.dataSource?.setSort(this.sort);\n\t\t}\n\t}\n\n\tprivate connectToDatasource(): void {\n\t\tthis.dataSource?.connect()?.pipe(takeUntil(this._onDestroy)).subscribe(data => {\n\t\t\tif (data) {\n\t\t\t\tthis.count = this.dataSource.getCount();\n\t\t\t\tthis.updateParams();\n\t\t\t\tthis.updateSelectionStatus();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Updates sortColumn and sortDirection\n\t * @param changes chosen sortCOlumn and sortDirection\n\t */\n\tpublic updateSortParams(changes: { active: string, direction: SortDirection }): void {\n\t\tthis.sortColumn = changes.active;\n\t\tthis.sortDirection = changes.direction;\n\t\tconst data: SirenTableFilterModel = { sortColumn: this.sortColumn, sortDirection: this.sortDirection };\n\t\tthis.dataSource.updateSortParams(data);\n\t}\n\n\t/**\n\t * Updates page and size\n\t * @param changes chosen page and size\n\t */\n\tpublic updatePaginationParams(changes: {pageSize: number, pageIndex: number}): void {\n\t\tif (this.allowPagination){ // updatePaginationParams is a public method => It can be called from the parent component.\n\t\t\tthis.page = changes.pageIndex;\n\t\t\tthis.size = changes.pageSize;\n\t\t\tconst data: SirenTableFilterModel = { page: this.page, size: this.size };\n\t\t\tthis.dataSource.updatePaginationParams(data);\n\t\t}\n\t}\n\n\tprivate updateParams(): void {\n\t\tif (this.allowPagination){\n\t\t\tthis.page = this.dataSource?.getPage();\n\t\t\tthis.paginator.pageIndex = this.page;\n\t\t\tthis.size = this.dataSource?.getSize();\n\t\t\tthis.paginator.pageSize = this.size;\n\t\t}\n\t\tthis.sortColumn = this.dataSource?.getSortColumn();\n\t\tthis.sort.active = this.sortColumn;\n\t\tthis.sortDirection = this.dataSource?.getSortDirection();\n\t\tthis.sort.direction = this.sortDirection;\n\t\tthis.searchString = this.dataSource?.getKeyword();\n\t}\n\n\t/** Selects all rows if they are not all selected; otherwise clear selection. */\n\tpublic masterToggle(event: MatCheckboxChange ): void {\n\t\tthis.clickedRow = null;\n\t\tif (event.checked) {\n\t\t\tif (this.allowMultiSelection) {\n\t\t\t\tthis.dataSource.selectAllRows();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.dataSource.deselectAllRows(false);\n\t\t\t\tevent.source.checked = false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.dataSource.deselectAllRows();\n\t\t}\n\t\tthis.updateSelectionStatus();\n\t}\n\n\tget searchChanged(): string {\n\t\treturn this.searchString;\n\t}\n\n\tset searchChanged(input: string) {\n\t\tthis.searchString = input?.trim();\n\t}\n\n\t/**\n\t * Selects row\n\t * @param event check's event\n\t * @param row selected row\n\t */\n\tpublic selectRowTable(event: MatCheckboxChange, row: SirenTableData): void {\n\t\tthis.clickedRow = null;\n\t\tif (event?.checked) {\n\t\t\tif (!this.allowMultiSelection) {\n\t\t\t\tthis.dataSource.deselectAllRows(false);\n\t\t\t}\n\t\t\tthis.dataSource.selectRow(row);\n\t\t}\n\t\telse {\n\t\t\tthis.dataSource.deselectRow(row);\n\t\t}\n\t\tthis.updateSelectionStatus();\n\t}\n\n\t/**\n\t * These function is used to update checkbox status\n\t */\n\tprivate updateSelectionStatus(): void {\n\t\tthis.isAllSelected = this.dataSource?.isAllRowsSelected();\n\t\tthis.partialSelection = this.dataSource?.getSelectionCounter() > 0;\n\t\tthis.selectedRowCounter = this.dataSource?.getSelectionCounter();\n\t}\n\n\t/**\n\t * Filters table's data based on given keyword\n\t * @param keyword keyword in search box input\n\t */\n\tpublic quickSearchChanged(keyword: string): void {\n\t\tkeyword = keyword?.trim().toLowerCase();\n\t\tif (keyword !== this.previousKeyword && this.allowFiltering){\n\t\t\tthis.previousKeyword = keyword;\n\t\t\tif (this.allowPagination){\n\t\t\t\tthis.page = DefaultFilterValue.DEFAULT_PAGE;\n\t\t\t\tthis.paginator.pageIndex = this.page;\n\t\t\t}\n\t\t\tkeyword = keyword?.trim().toLowerCase(); // Remove whitespace\n\t\t\tthis.dataSource.filter(keyword);\n\t\t}\n\t}\n\n\t/**\n\t * @param row Emits the row to be deleted and its index through `onDeleteClick` listener\n\t */\n\tpublic deleteBtnClicked(row: SirenTableData): void {\n\t\tif(row.isSelected){\n\t\t\tthis.dataSource.deselectRow(row);\n\t\t}\n\t\tconst index = this.dataSource.getIndexOf(row);\n\t\tthis.onDeleteClick.emit({ row, index});\n\t}\n\n\t/**\n\t * Emits clicked row through `onRowClick` listener\n\t * @param row clicked row\n\t */\n\tpublic onRowClickClicked(row: SirenTableData): void {\n\t\tif(this.onRowClick.observers.length > 0 ) { // check if the parent component is listening on row click event\n\t\t\tthis.clickedRow = row.selectionId;\n\t\t\tthis.onRowClick.emit(row);\n\t\t}\n\t}\n\n\t/**\n\t * Swaps table's rows\n\t * @param event emitted when the user drops a draggable item inside a drop container.\n\t */\n\tpublic swapRows(event: CdkDragDrop<SirenTableColumns<any>[]>): void {\n\t\tconst previousIndex = this.allowPagination ? event.previousIndex + this.page*this.size : event.previousIndex;\n\t\tconst currentIndex = this.allowPagination ? event.currentIndex + this.page*this.size : event.currentIndex;\n\t\tthis.dataSource.swapRows(previousIndex , currentIndex);\n\t\tthis.table.renderRows();\n\t\tthis.onReorder.emit({event, data: this.dataSource.getData()});\n\t}\n}\n","<div class=\"siren-table-search-container\" >\n    <mat-form-field appearance=\"fill\" class=\"siren-table-search-field full-width-mobile\"  *ngIf=\"allowFiltering\" >\n        <button *ngIf=\"searchChanged !== ''\" mat-icon-button matSuffix (click)=\"searchChanged = ''; quickSearchChanged('')\">\n            <mat-icon class=\"siren-table-mat-icons\">clear</mat-icon>\n        </button>\n        <input autocomplete=\"off\" (keyup)=\"quickSearchChanged($event.target.value)\"\n            matInput [placeholder]=\"labels?.searchBoxLabel ?? 'بحث'\" [(ngModel)]=\"searchChanged\">\n        <button mat-icon-button matPrefix><mat-icon class=\"siren-table-mat-icons\">search</mat-icon></button>\n    </mat-form-field>\n</div>\n\n<div *ngIf=\"count === 0\" style=\"padding-inline-start: 10px;\">{{ labels?.noDataLabel ?? \"لا يوجد بيانات\" }}</div>\n\n<div class=\"siren-table-container mat-elevation-z8\" [ngClass]=\"{'visibility-hidden': count === 0}\">\n    <div class=\"siren-table-data-container\" [ngStyle]=\"{ 'height': (innerHeight * 0.35) + 'px' }\">\n        <table mat-table #table multiTemplateDataRows [dataSource]=\"dataSource\" class=\"siren-table\" matSort [matSortActive]=\"sortColumn\" [matSortDirection]=\"sortDirection\" (matSortChange)=\"updateSortParams($event)\" cdkDropList [cdkDropListData]=\"dataSource\" (cdkDropListDropped)=\"swapRows($event)\">\n            <!-- Checkbox Column to select -->\n            <ng-container *ngIf=\"allowSingleSelection || allowMultiSelection\" matColumnDef={{sirenTableAction.SELECT}}>\n                <th mat-header-cell *matHeaderCellDef class=\"siren-table-checkbox-col siren-action-col\">\n                    <mat-checkbox  #selectAllCheckbox *ngIf=\"allowMultiSelection || partialSelection\" color=\"primary\" (change)=\"$event ? masterToggle($event) : null\"\n                        [checked]=\"isAllSelected\" (click)=\"$event.stopPropagation()\"\n                        [indeterminate]=\"partialSelection && !isAllSelected\" class=\"siren-table-checkbox\">\n                    </mat-checkbox>\n                </th>\n                <td mat-cell *matCellDef=\"let row\" class=\"siren-table-checkbox-col\" [ngStyle]=\"{'border-bottom-width': expandedCols.length > 0 ? 0 : inherit}\">\n                    <mat-checkbox color=\"primary\" (change)=\"$event ? selectRowTable($event, row) : null\"\n                        [checked]=\"row.isSelected || selectAllCheckbox?.checked\" class=\"siren-table-checkbox\">\n                    </mat-checkbox>\n                </td>\n            </ng-container>\n\n            <!-- Position Column -->\n            <ng-container *ngIf=\"allowReordering\" matColumnDef={{sirenTableAction.REORDER}} class=\"siren-action-col\">\n                <th mat-header-cell class=\"montserrat bold siren-action-col\" *matHeaderCellDef></th>\n                <td mat-cell class=\"openSans\" *matCellDef=\"let element\">\n                <mat-icon class=\"siren-table-mat-icons\" cdkDragHandle>reorder</mat-icon>\n                </td>\n            </ng-container>\n\n            <!-- show hide details -->\n            <ng-container *ngIf=\"expandedCols.length > 0\" matColumnDef={{sirenTableAction.EXPAND}} class=\"siren-action-col\">\n                <th mat-header-cell class=\"montserrat bold siren-action-col\" *matHeaderCellDef> </th>\n                <td mat-cell class=\"openSans\" *matCellDef=\"let element\" [ngStyle]=\"{'border-bottom-width': expandedCols.length > 0 ? 0 : inherit}\">\n                    <mat-icon class=\"siren-table-expand-btn siren-table-mat-icons\" (click)=\"expandedElement = expandedElement === element ? null : element\">{{expandedElement === element ? 'expand_less' : 'expand_more'}}</mat-icon>\n                </td>                \n            </ng-container>\n\n            <!-- Delete row action -->\n            <ng-container *ngIf=\"withDelete\" matColumnDef=\"{{ sirenTableAction.DELETE }}\" class=\"siren-action-col\">\n                <th mat-header-cell *matHeaderCellDef class=\"siren-action-col\"></th> \n                <td mat-cell *matCellDef=\"let element\" [ngStyle]=\"{'border-bottom-width': expandedCols.length > 0 ? 0 : inherit}\">\n                    <button mat-mini-fab class=\"siren-table-delete-btn\" (click)=\"deleteBtnClicked(element)\"><mat-icon class=\"siren-table-mat-icons\">delete</mat-icon></button>\n                </td>\n            </ng-container>\n\n            <!-- The base columns -->\n            <ng-container *ngFor=\"let column of baseCols\" matColumnDef={{column.columnDef}}>\n                <!-- default columns -->\n                <div *ngIf=\"!column.customColumn\">\n                    <th mat-header-cell class=\"montserrat bold siren-table-header\" *matHeaderCellDef=\"let element\" mat-sort-header [disabled]=\"!column.allowSorting ?? false\"> {{column.header}} </th> \n                    <td mat-cell class=\"openSans\" *matCellDef=\"let element\" class=\"siren-table-cell\" [ngClass]=\"{'cursor-pointer': onRowClick.observers.length > 0}\" (click)=\"onRowClickClicked(element)\" \n                    [ngStyle]=\"{'border-bottom-width': expandedCols.length > 0 ? 0 : inherit}\">\n                        <span [matTooltip]=\"column.cellValue(element)\" appTooltipIfTruncated *ngIf=\"column.cellValue(element) !== true && column.cellValue(element) !== false\" [ngClass]=\"{'ellipsis-overflow': column.allowEllipsis}\">\n                            {{ column.cellValue(element) || ' '}}\n                        </span>\n                        <mat-icon class=\"siren-table-checked-icon siren-table-mat-icons\" *ngIf=\"column.cellValue(element) === true\">check_circle</mat-icon>\n                        <mat-icon class=\"siren-table-unchecked-icon siren-table-mat-icons\" *ngIf=\"column.cellValue(element) === false\">cancel</mat-icon>\n                    </td>\n                </div>\n                <!-- custom template columns -->\n                <div *ngIf=\"column.customColumn\">\n                    <th mat-header-cell class=\"montserrat bold siren-table-header\" *matHeaderCellDef=\"let element\"> {{ column.header }}</th> \n                    <td mat-cell class=\"siren-table-cell\" *matCellDef=\"let element\" [ngClass]=\"{'cursor-pointer': onRowClick.observers.length > 0}\" [ngStyle]=\"{'border-bottom-width': expandedCols.length > 0 ? 0 : inherit}\">\n                        <ng-container *ngTemplateOutlet=\"customTemplates | customTemplate : column.columnDef; context: {$implicit: element}\"></ng-container>\n                    </td>\n                </div>\n            </ng-container>\n             <!-- expanded columns -->\n            <ng-container matColumnDef=\"sirenExpandedData\">\n                <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"displayedColumnsWithAction.length+1\">\n                    <div class=\"siren-table-expand-row\" *ngFor=\"let column of expandedCols\"\n                    [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\" [style.height]=\"element == expandedElement ? 'unset' : '0 !important'\">\n                        <div *ngIf=\"column.cellValue(element)\">{{ column.header || ''}}</div>\n                        <div *ngIf=\"column.cellValue(element)\">{{ column.cellValue(element) || ''}}</div>\n                    </div>\n                </td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumnsWithAction; sticky: true\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumnsWithAction\" cdkDrag [cdkDragDisabled]=\"!allowReordering\" [cdkDragData]=\"row\"\n                [ngClass]=\"{ 'selected': (row?.isSelected) || (row?.selectionId == clickedRow && clickedRow != undefined), 'element-row': onRowClick.observers.length > 0 }\">\n            </tr>\n            <div *ngIf=\"expandedCols.length > 0\">\n                <tr mat-row *matRowDef=\"let row; columns: ['sirenExpandedData']\" class=\"detail-row\" [ngClass]=\"{ 'selected': (row.isSelected) || (row.selectionId === clickedRow && clickedRow != undefined)}\"></tr>\n            </div>\n        </table>\n    </div>\n    <div class=\"siren-table-paginator-container\" *ngIf=\"allowPagination\">\n        <mat-paginator [pageSize]=\"size\" [pageIndex]=\"page\" [length]=\"count\" #paginator (page)=\"updatePaginationParams($event)\" [pageSizeOptions]=\"[10, 20, 50, 100, 200, 1000]\" showFirstLastButtons ></mat-paginator>\n        <div *ngIf=\"(allowMultiSelection || allowSingleSelection) && selectedRowCounter > 0\">\n            <span class=\"siren-table-selection-counter\" >{{selectedRowCounter}} {{ labels?.selectionLabel ?? \"بيانات محددة\" }}</span>\n        </div>\n    </div>\n</div>\n<div class=\"submit-container\" *ngIf=\"( allowSingleSelection || allowMultiSelection ) && count !== 0\" style=\"padding-top: 8px; margin: 10px 15px\">\n    <button mat-raised-button class=\"siren-table-submit-btn\" (click)=\"onSubmitClick.emit(this.dataSource.getSelectedRows())\">{{ labels?.doneBtnLabel ?? \"انتهاء\" }}</button>\n</div>\n","import { SirenTableComponent } from './table.component';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CustomColsDirective } from './directive/custom-template.directive';\nimport { EllipsifyMeDirective } from './directive/ellipsify-me.directive';\nimport { CustomTemplatePipe } from './pipes/custom-template.pipe';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\n\n\n@NgModule({\n  declarations: [\n    SirenTableComponent,\n    EllipsifyMeDirective,\n    CustomColsDirective,\n    CustomTemplatePipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatTooltipModule,\n    MatSortModule,\n    DragDropModule,\n    MatCheckboxModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatButtonModule,\n    MatInputModule\n  ],\n  exports: [\n    SirenTableComponent,\n    CustomColsDirective,\n    CustomTemplatePipe\n  ]\n})\nexport class SirenTableModule { }\n","export function deepClone(obj): any {\n\treturn JSON.parse(JSON.stringify(obj));\n}","import { BehaviorSubject, Observable, of } from 'rxjs';\nimport { SirenTableService } from '../interfaces/siren-data-service';\nimport { SirenTableFilterModel } from '../interfaces/siren-table-filter.model';\nimport { SirenDataSource } from './siren-datasource';\nimport { SirenTableData, SirenTableSource } from '../interfaces/data-table.model';\nimport { deepClone } from '../utils/helpers';\nimport { SortDirection } from '@angular/material/sort';\nimport { DefaultFilterValue } from '../enums/siren-table-filter-value.enum';\nexport class SirenBeDataSource<T> extends SirenDataSource{\n\n\tprivate readonly dataSubject = new BehaviorSubject<SirenTableData[]>([]);\n\tprivate params: SirenTableFilterModel;\n\tprivate count: number = 0;\n\tconstructor(public service: SirenTableService<T>) {\n\t\tsuper();\n\t}\n\tconnect(): Observable<SirenTableData[]> {\n\t\treturn this.dataSubject.asObservable();\n\t}\n\n\tdisconnect(): void {\n\t\tthis.dataSubject.complete();\n\t}\n\tpublic getSize(): number {\n\t\treturn this.params?.size ?? DefaultFilterValue.DEFAULT_PAGE_SIZE;\n\t}\n\tpublic getPage(): number {\n\t\treturn this.params?.page ?? DefaultFilterValue.DEFAULT_PAGE;\n\t}\n\tpublic getKeyword(): string {\n\t\treturn this.params?.keyword ?? DefaultFilterValue.DEFAULT_KEYWORD;\n\t}\n\tpublic getSortColumn(): string {\n\t\treturn this.params?.sortColumn ?? DefaultFilterValue.DEFAULT_SORT_COLUMN;\n\t}\n\tpublic getSortDirection(): SortDirection {\n\t\treturn this.params?.sortDirection ?? DefaultFilterValue.DEFAULT_SORT_DIRECTION;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this.count;\n\t}\n\n\tpublic isAllRowsSelected(): boolean {\n\t\treturn this.data?.find(row => row.isSelected === false || row.isSelected === undefined) === undefined;\n\t}\n\t/**\n\t * Loads the data fetched from the backend into Siren data table.\n\t * It is invoked on each pagination and sorting change event.\n\t * @param params an object that can be a filter's field to fetch data based on speicific condition, usually it represents the request header\n\t * @param showLoader useful while using spinner interceptor to show/hide the spinner.\n\t */\n\tpublic loadData(params: SirenTableFilterModel, showLoader = true): void {\n\t\tthis.params = params;\n\t\tthis.fetchData(this.params,showLoader);\n\t}\n\n\tprivate fetchData(params: SirenTableFilterModel, showLoader = true): void {\n\t\tthis.service.fetchData(params, showLoader)\n\t\t\t.subscribe( data => {\n\t\t\t\tconst response = this.service.handleData(data?.body);\n\t\t\t\tthis.setCountAndData(response);\n\t\t\t\tthis.sendDataToTable();\n\t\t\t},() => {\n\t\t\t\tthis.resetData();\n\t\t\t\treturn of();\n\t\t\t});\n\t}\n\n\t/**\n\t * Loads last data in the table's.\n\t */\n\tpublic resetData(): void {\n\t\tthis.dataSubject.next(deepClone(this.data));\n\t}\n\n\tpublic filter(keywords: string): void {\n\t\tthis.params.keyword = keywords;\n\t\tthis.params.page = DefaultFilterValue.DEFAULT_PAGE;\n\t\tthis.service.filterDataTable(this.params, this.data).subscribe(data => {\n\t\t\t\tconst response = this.service.handleData(data?.body);\n\t\t\t\tthis.setCountAndData(response);\n\t\t\t\tthis.sendDataToTable();\n\t\t\t},() => {\n\t\t\t\tthis.resetData();\n\t\t\t\treturn of();\n\t\t\t});\n\t}\n\n\tprivate setCountAndData(response: SirenTableSource<SirenTableData>): void {\n\t\tthis.count = response.count;\n\t\tthis.data = response.list;\n\t\tthis.checkSelectedRows();\n\t}\n\n\tprotected sendDataToTable(): void {\n\t\tthis.dataSubject.next(this.data);\n\t}\n\n\tpublic selectAllRows(): void {\n\t\tthis.data.forEach(row => {\n\t\t\tthis.selectRow(row);\n\t\t});\n\t}\n\n\tpublic deselectAllRows(onlyPaginated = true): void {\n\t\tthis.data.forEach(row => this.deselectRow(row))\n\t\tif (!onlyPaginated) {\n\t\t\tthis.selectedRows.clear();\n\t\t}\n\t}\n\t/**\n\t * Sets current page, size and invoke fetchData accordingly\n\t * @param data a model that contain current page, size\n\t */\n\tpublic updatePaginationParams(data: SirenTableFilterModel): void {\n\t\tthis.params.page = data.page;\n\t\tthis.params.size = data.size;\n\t\tthis.fetchData(this.params);\n\t}\n\t/**\n\t * Sets sortColumn and sortDirection and invoke fetchData accordingly\n\t * @param data a model that contain sortColumn and sortDirection\n\t */\n\tpublic updateSortParams(data: SirenTableFilterModel): void {\n\t\tthis.params.sortColumn = data.sortColumn;\n\t\tthis.params.sortDirection = data.sortDirection;\n\t\tthis.fetchData(this.params);\n\t}\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i3","i13.EllipsifyMeDirective","i14.CustomTemplatePipe"],"mappings":"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"}