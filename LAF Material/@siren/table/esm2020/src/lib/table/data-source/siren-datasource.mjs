import { moveItemInArray } from '@angular/cdk/drag-drop';
export class SirenDataSource {
    constructor() {
        this.selectedRows = new Map();
        this.data = [];
    }
    /**
     * Swap items when reordering features is enabled.
     * Calling this function outside SirenTableComponent doesn't re-render the new order of data
     * @param previousIndex
     * @param currentIndex
     */
    swapRows(previousIndex, currentIndex) {
        moveItemInArray(this.data, previousIndex, currentIndex);
        this.sendDataToTable();
    }
    /**
     * Returns an array that represent all table's data
     */
    getData() {
        return this.data;
    }
    /**
     * Returns the index of a row in the table based on selectionId
     * @param row an element provided in loadData function of SirenFeDataSource or handleData of SirenDataService
     * @returns index of the first element in data array
     */
    getIndexOf(row) {
        return this.data.findIndex(elem => elem.selectionId === row.selectionId);
    }
    /**
     * Returns number of selected rows
     */
    getSelectionCounter() {
        return this.selectedRows.size;
    }
    /**
     * Returns selected rows
     */
    getSelectedRows() {
        return [...this.selectedRows.values()];
    }
    /**
     * Selects a row based on selectionId
     */
    selectRow(row) {
        row.isSelected = true;
        this.selectedRows.set(row.selectionId, row);
    }
    /**
     * Deselects a row based on selectionId
     */
    deselectRow(row) {
        row.isSelected = false;
        this.selectedRows.delete(row.selectionId);
    }
    /**
     * Returns `true` if a row is selected and `false` otherwise
     */
    checkSelectedRows() {
        this.data.forEach(row => {
            if (this.selectedRows.has(row.selectionId)) { // We need to check if the selectionId is in the selectedRows to know if it is a selected row because isSelected field is set to false with server-side pagination
                row['isSelected'] = true;
            }
            else if (row.isSelected) { // A row that have isSelected true by default should be selected
                this.selectRow(row);
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lyZW4tZGF0YXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3RhYmxlL3NyYy9saWIvdGFibGUvZGF0YS1zb3VyY2Uvc2lyZW4tZGF0YXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFNekQsTUFBTSxPQUFnQixlQUFlO0lBQXJDO1FBaURjLGlCQUFZLEdBQXdDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDOUQsU0FBSSxHQUFxQixFQUFFLENBQUM7SUF1RTFDLENBQUM7SUFyRUE7Ozs7O09BS0c7SUFDSSxRQUFRLENBQUMsYUFBcUIsRUFBRSxZQUFvQjtRQUMxRCxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7T0FFRztJQUNJLE9BQU87UUFDYixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxVQUFVLENBQUMsR0FBbUI7UUFDakMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFSjs7T0FFRztJQUNPLG1CQUFtQjtRQUM1QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNJLGVBQWU7UUFDckIsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxHQUFtQjtRQUNuQyxHQUFHLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFDRDs7T0FFRztJQUNJLFdBQVcsQ0FBQyxHQUFtQjtRQUNyQyxHQUFHLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ08saUJBQWlCO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ3hCLElBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsa0tBQWtLO2dCQUM5TSxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQ3pCO2lCQUFNLElBQUksR0FBRyxDQUFDLFVBQVUsRUFBQyxFQUFFLGdFQUFnRTtnQkFDM0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNwQjtRQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YVNvdXJjZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2xsZWN0aW9ucyc7XG5pbXBvcnQgeyBtb3ZlSXRlbUluQXJyYXkgfSBmcm9tICdAYW5ndWxhci9jZGsvZHJhZy1kcm9wJztcbmltcG9ydCB7IFNvcnREaXJlY3Rpb24gfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zb3J0JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFNpcmVuVGFibGVEYXRhIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9kYXRhLXRhYmxlLm1vZGVsJztcbmltcG9ydCB7IFNpcmVuVGFibGVGaWx0ZXJNb2RlbCB9IGZyb20gJy4uL2ludGVyZmFjZXMvc2lyZW4tdGFibGUtZmlsdGVyLm1vZGVsJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNpcmVuRGF0YVNvdXJjZSBpbXBsZW1lbnRzIERhdGFTb3VyY2U8U2lyZW5UYWJsZURhdGE+IHtcblx0YWJzdHJhY3QgdXBkYXRlUGFnaW5hdGlvblBhcmFtcyhkYXRhOiBTaXJlblRhYmxlRmlsdGVyTW9kZWwpOiB2b2lkO1xuXHRhYnN0cmFjdCB1cGRhdGVTb3J0UGFyYW1zKGRhdGE6IFNpcmVuVGFibGVGaWx0ZXJNb2RlbCk6IHZvaWQ7XG5cdGFic3RyYWN0IGNvbm5lY3QoKTogT2JzZXJ2YWJsZTxyZWFkb25seSBTaXJlblRhYmxlRGF0YVtdPjtcblx0YWJzdHJhY3QgZGlzY29ubmVjdCgpOiB2b2lkO1xuXHQvKipcblx0ICogRmlsdGVycyBkYXRhIGJhc2VkIG9uIHRoZSBrZXl3b3Jkc1xuXHQgKiBAcGFyYW0ga2V5d29yZHMgY3VycmVudCB2YWx1ZSBvZiB0aGUgc2VhcmNoIGJveFxuXHQgKi9cblx0YWJzdHJhY3QgZmlsdGVyKGtleXdvcmRzOiBzdHJpbmcpOiB2b2lkO1xuXHRwcm90ZWN0ZWQgYWJzdHJhY3Qgc2VuZERhdGFUb1RhYmxlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2VsZWN0cyBhbGwgcm93cyBpbiB0aGUgY3VycmVudCBwYWdlLlxuICAgICAqL1xuXHRhYnN0cmFjdCBzZWxlY3RBbGxSb3dzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRGVzZWxlY3RzIGFsbCByb3dzXG4gICAgICogQHBhcmFtIG9ubHlQYWdpbmF0ZWQgdHJ1ZSBieSBkZWZhdWx0LlxuICAgICAqL1xuXHRhYnN0cmFjdCBkZXNlbGVjdEFsbFJvd3Mob25seVBhZ2luYXRlZD86IGJvb2xlYW4pOiB2b2lkO1xuXHQvKipcblx0ICogUmV0dXJucyBsYXN0IGNob3NlbiBzaXplIG9mIHBhZ2luYXRvci4gRGVmYXVsdCBpcyAyMFxuXHQgKi9cblx0YWJzdHJhY3QgZ2V0U2l6ZSgpOiBudW1iZXI7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGxhc3QgY2hvc2VuIHBhZ2Ugb2YgcGFnaW5hdGlvbi4gRGVmYXVsdCBpcyAwXG5cdCAqL1xuXHRhYnN0cmFjdCBnZXRQYWdlKCk6IG51bWJlcjtcblx0LyoqXG5cdCAqIFJldHVybnMgbGFzdCBrZXl3b3JkIHdyaXR0ZW4gaW4gc2VhcmNoIGJveCB3aGVuIGFsbG93RmlsdGVyaW5nIGlucHV0IGlzIHRydWVcblx0ICovXG5cdGFic3RyYWN0IGdldEtleXdvcmQoKTogc3RyaW5nO1xuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbGFzdCBjaG9zZW4gY29sdW1uIHRvIHNvcnQgZGF0YS5cblx0ICogQHJldHVybnMgY29sdW1uRGVmIG9mIHRoZSBjb2x1bW5cblx0ICovXG5cdGFic3RyYWN0IGdldFNvcnRDb2x1bW4oKTogc3RyaW5nO1xuXHQvKipcblx0ICogUmV0dXJucyBsYXN0IGNob3NlbiBkaXJlY3Rpb24gdG8gc29ydCBkYXRhXG5cdCAqL1xuXHRhYnN0cmFjdCBnZXRTb3J0RGlyZWN0aW9uKCk6IFNvcnREaXJlY3Rpb247XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGxlbmd0aCBvZiBkYXRhIGFycmF5XG5cdCAqL1xuXHRhYnN0cmFjdCBnZXRDb3VudCgpOiBudW1iZXI7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgYWxsIGRhdGEgaW4gdGhlIGN1cnJlbnQgcGFnZSBpcyBzZWxlY3RlZFxuXHQgKi9cblx0YWJzdHJhY3QgaXNBbGxSb3dzU2VsZWN0ZWQoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgc2VsZWN0ZWRSb3dzOiBNYXA8c3RyaW5nIHwgbnVtYmVyLFNpcmVuVGFibGVEYXRhPiA9IG5ldyBNYXAoKTtcbiAgICBwcm90ZWN0ZWQgZGF0YTogU2lyZW5UYWJsZURhdGFbXSA9IFtdO1xuXG5cdC8qKlxuXHQgKiBTd2FwIGl0ZW1zIHdoZW4gcmVvcmRlcmluZyBmZWF0dXJlcyBpcyBlbmFibGVkLlxuXHQgKiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gb3V0c2lkZSBTaXJlblRhYmxlQ29tcG9uZW50IGRvZXNuJ3QgcmUtcmVuZGVyIHRoZSBuZXcgb3JkZXIgb2YgZGF0YVxuXHQgKiBAcGFyYW0gcHJldmlvdXNJbmRleFxuXHQgKiBAcGFyYW0gY3VycmVudEluZGV4XG5cdCAqL1xuXHRwdWJsaWMgc3dhcFJvd3MocHJldmlvdXNJbmRleDogbnVtYmVyLCBjdXJyZW50SW5kZXg6IG51bWJlcik6IHZvaWQge1xuXHRcdG1vdmVJdGVtSW5BcnJheSh0aGlzLmRhdGEsIHByZXZpb3VzSW5kZXgsIGN1cnJlbnRJbmRleCk7XG5cdFx0dGhpcy5zZW5kRGF0YVRvVGFibGUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIGFycmF5IHRoYXQgcmVwcmVzZW50IGFsbCB0YWJsZSdzIGRhdGFcblx0ICovXG5cdHB1YmxpYyBnZXREYXRhKCk6IFNpcmVuVGFibGVEYXRhW117XG5cdFx0cmV0dXJuIHRoaXMuZGF0YTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbmRleCBvZiBhIHJvdyBpbiB0aGUgdGFibGUgYmFzZWQgb24gc2VsZWN0aW9uSWRcblx0ICogQHBhcmFtIHJvdyBhbiBlbGVtZW50IHByb3ZpZGVkIGluIGxvYWREYXRhIGZ1bmN0aW9uIG9mIFNpcmVuRmVEYXRhU291cmNlIG9yIGhhbmRsZURhdGEgb2YgU2lyZW5EYXRhU2VydmljZVxuXHQgKiBAcmV0dXJucyBpbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiBkYXRhIGFycmF5XG5cdCAqL1xuICAgIHB1YmxpYyBnZXRJbmRleE9mKHJvdzogU2lyZW5UYWJsZURhdGEpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmZpbmRJbmRleChlbGVtID0+IGVsZW0uc2VsZWN0aW9uSWQgPT09IHJvdy5zZWxlY3Rpb25JZCk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIG51bWJlciBvZiBzZWxlY3RlZCByb3dzXG5cdCAqL1xuICAgIHB1YmxpYyBnZXRTZWxlY3Rpb25Db3VudGVyKCk6IG51bWJlcntcblx0XHRyZXR1cm4gdGhpcy5zZWxlY3RlZFJvd3Muc2l6ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHNlbGVjdGVkIHJvd3Ncblx0ICovXG5cdHB1YmxpYyBnZXRTZWxlY3RlZFJvd3MoKTogU2lyZW5UYWJsZURhdGFbXSB7XG5cdFx0cmV0dXJuIFsuLi50aGlzLnNlbGVjdGVkUm93cy52YWx1ZXMoKV07XG5cdH1cblxuXHQvKipcblx0ICogU2VsZWN0cyBhIHJvdyBiYXNlZCBvbiBzZWxlY3Rpb25JZFxuXHQgKi9cblx0cHVibGljIHNlbGVjdFJvdyhyb3c6IFNpcmVuVGFibGVEYXRhKTogdm9pZHtcblx0XHRyb3cuaXNTZWxlY3RlZCA9IHRydWU7XG5cdFx0dGhpcy5zZWxlY3RlZFJvd3Muc2V0KHJvdy5zZWxlY3Rpb25JZCxyb3cpO1xuXHR9XG5cdC8qKlxuXHQgKiBEZXNlbGVjdHMgYSByb3cgYmFzZWQgb24gc2VsZWN0aW9uSWRcblx0ICovXG5cdHB1YmxpYyBkZXNlbGVjdFJvdyhyb3c6IFNpcmVuVGFibGVEYXRhKTogdm9pZCB7XG5cdFx0cm93LmlzU2VsZWN0ZWQgPSBmYWxzZTtcblx0XHR0aGlzLnNlbGVjdGVkUm93cy5kZWxldGUocm93LnNlbGVjdGlvbklkKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiBhIHJvdyBpcyBzZWxlY3RlZCBhbmQgYGZhbHNlYCBvdGhlcndpc2Vcblx0ICovXG5cdHByb3RlY3RlZCBjaGVja1NlbGVjdGVkUm93cygpOiB2b2lke1xuXHRcdHRoaXMuZGF0YS5mb3JFYWNoKCByb3cgPT57XG5cdFx0XHRpZih0aGlzLnNlbGVjdGVkUm93cy5oYXMocm93LnNlbGVjdGlvbklkKSkgeyAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSBzZWxlY3Rpb25JZCBpcyBpbiB0aGUgc2VsZWN0ZWRSb3dzIHRvIGtub3cgaWYgaXQgaXMgYSBzZWxlY3RlZCByb3cgYmVjYXVzZSBpc1NlbGVjdGVkIGZpZWxkIGlzIHNldCB0byBmYWxzZSB3aXRoIHNlcnZlci1zaWRlIHBhZ2luYXRpb25cblx0XHRcdFx0cm93Wydpc1NlbGVjdGVkJ10gPSB0cnVlO1xuXHRcdFx0fSBlbHNlIGlmIChyb3cuaXNTZWxlY3RlZCl7IC8vIEEgcm93IHRoYXQgaGF2ZSBpc1NlbGVjdGVkIHRydWUgYnkgZGVmYXVsdCBzaG91bGQgYmUgc2VsZWN0ZWRcblx0XHRcdFx0dGhpcy5zZWxlY3RSb3cocm93KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG59Il19