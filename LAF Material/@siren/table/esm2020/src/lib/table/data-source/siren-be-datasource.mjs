import { BehaviorSubject, of } from 'rxjs';
import { SirenDataSource } from './siren-datasource';
import { deepClone } from '../utils/helpers';
import { DefaultFilterValue } from '../enums/siren-table-filter-value.enum';
export class SirenBeDataSource extends SirenDataSource {
    constructor(service) {
        super();
        this.service = service;
        this.dataSubject = new BehaviorSubject([]);
        this.count = 0;
    }
    connect() {
        return this.dataSubject.asObservable();
    }
    disconnect() {
        this.dataSubject.complete();
    }
    getSize() {
        return this.params?.size ?? DefaultFilterValue.DEFAULT_PAGE_SIZE;
    }
    getPage() {
        return this.params?.page ?? DefaultFilterValue.DEFAULT_PAGE;
    }
    getKeyword() {
        return this.params?.keyword ?? DefaultFilterValue.DEFAULT_KEYWORD;
    }
    getSortColumn() {
        return this.params?.sortColumn ?? DefaultFilterValue.DEFAULT_SORT_COLUMN;
    }
    getSortDirection() {
        return this.params?.sortDirection ?? DefaultFilterValue.DEFAULT_SORT_DIRECTION;
    }
    getCount() {
        return this.count;
    }
    isAllRowsSelected() {
        return this.data?.find(row => row.isSelected === false || row.isSelected === undefined) === undefined;
    }
    /**
     * Loads the data fetched from the backend into Siren data table.
     * It is invoked on each pagination and sorting change event.
     * @param params an object that can be a filter's field to fetch data based on speicific condition, usually it represents the request header
     * @param showLoader useful while using spinner interceptor to show/hide the spinner.
     */
    loadData(params, showLoader = true) {
        this.params = params;
        this.fetchData(this.params, showLoader);
    }
    fetchData(params, showLoader = true) {
        this.service.fetchData(params, showLoader)
            .subscribe(data => {
            const response = this.service.handleData(data?.body);
            this.setCountAndData(response);
            this.sendDataToTable();
        }, () => {
            this.resetData();
            return of();
        });
    }
    /**
     * Loads last data in the table's.
     */
    resetData() {
        this.dataSubject.next(deepClone(this.data));
    }
    filter(keywords) {
        this.params.keyword = keywords;
        this.params.page = DefaultFilterValue.DEFAULT_PAGE;
        this.service.filterDataTable(this.params, this.data).subscribe(data => {
            const response = this.service.handleData(data?.body);
            this.setCountAndData(response);
            this.sendDataToTable();
        }, () => {
            this.resetData();
            return of();
        });
    }
    setCountAndData(response) {
        this.count = response.count;
        this.data = response.list;
        this.checkSelectedRows();
    }
    sendDataToTable() {
        this.dataSubject.next(this.data);
    }
    selectAllRows() {
        this.data.forEach(row => {
            this.selectRow(row);
        });
    }
    deselectAllRows(onlyPaginated = true) {
        this.data.forEach(row => this.deselectRow(row));
        if (!onlyPaginated) {
            this.selectedRows.clear();
        }
    }
    /**
     * Sets current page, size and invoke fetchData accordingly
     * @param data a model that contain current page, size
     */
    updatePaginationParams(data) {
        this.params.page = data.page;
        this.params.size = data.size;
        this.fetchData(this.params);
    }
    /**
     * Sets sortColumn and sortDirection and invoke fetchData accordingly
     * @param data a model that contain sortColumn and sortDirection
     */
    updateSortParams(data) {
        this.params.sortColumn = data.sortColumn;
        this.params.sortDirection = data.sortDirection;
        this.fetchData(this.params);
    }
}
//# sourceMappingURL=data:application/json;base64,