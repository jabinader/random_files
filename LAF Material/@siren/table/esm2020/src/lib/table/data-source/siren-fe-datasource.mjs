import { MatTableDataSource } from "@angular/material/table";
import { DefaultFilterValue } from "../enums/siren-table-filter-value.enum";
import { SirenDataSource } from './siren-datasource';
export class SirenFeDataSource extends SirenDataSource {
    constructor(data = [], config) {
        super();
        this.dataSource = new MatTableDataSource();
        if (data.length > 0) {
            this.loadData(data, config);
        }
        this.dataSource.connect().subscribe(data => {
            if (data) {
                this.paginatedData = data;
            }
        });
    }
    connect() {
        return this.dataSource.connect();
    }
    disconnect() {
        this.dataSource.disconnect();
    }
    getSize() {
        return this.size;
    }
    getPage() {
        return this.page;
    }
    getKeyword() {
        return this.keyword;
    }
    getSortColumn() {
        return this.sortColumn;
    }
    getSortDirection() {
        return this.sortDirection;
    }
    getCount() {
        return this.dataSource.filteredData.length;
    }
    isAllRowsSelected() {
        return this.paginatedData?.find(row => row.isSelected === false || row.isSelected === undefined) === undefined;
    }
    loadParams(config) {
        this.page = config?.page ?? DefaultFilterValue.DEFAULT_PAGE;
        this.size = config?.size ?? DefaultFilterValue.DEFAULT_PAGE_SIZE;
        this.sortColumn = config?.sortColumn ?? DefaultFilterValue.DEFAULT_SORT_COLUMN;
        this.sortDirection = config?.sortDirection ?? DefaultFilterValue.DEFAULT_SORT_DIRECTION;
        this.keyword = config?.keyword ?? DefaultFilterValue.DEFAULT_KEYWORD;
    }
    /**
     * Loads data in the table
     * @param data array of SirenTableData.
     * @param config optional object to set initial value for sorting and pagination.
     */
    loadData(data, config) {
        this.loadParams(config);
        this.data = data;
        this.checkSelectedRows();
        this.sendDataToTable();
        this.dataSource.filter = this.keyword;
    }
    /**
     * Sets the MatPaginator to enable client side pagination.
     */
    setPaginator(paginator) {
        this.dataSource.paginator = paginator;
    }
    /**
     * Sets MatSort to enable client side sorting.
     */
    setSort(sort) {
        this.dataSource.sort = sort;
    }
    /**
     * Sets page and size of the paginator. It doesn't trigger an ui change.
     * @param data object that contain page and size
     */
    updatePaginationParams(data) {
        this.page = data.page;
        this.size = data.size;
    }
    /**
     * Sets sort colummn and sort direction. It doesn't trigger an ui change.
     * @param data object that contain sortColumn and sortDirection
     */
    updateSortParams(data) {
        this.sortColumn = data.sortColumn;
        this.sortDirection = data.sortDirection;
    }
    filter(keywords) {
        this.page = DefaultFilterValue.DEFAULT_PAGE;
        this.keyword = keywords;
        this.dataSource.filter = keywords;
    }
    sendDataToTable() {
        this.dataSource.data = this.data;
    }
    selectAllRows() {
        this.paginatedData.forEach(row => {
            this.selectRow(row);
        });
    }
    /**
     *
     * @returns array filtered based on keyword in searchBox when allowFiltering input is true
     */
    getFilteredData() {
        return this.dataSource.filteredData;
    }
    /**
     * @returns array of current page data
     */
    getPaginatedData() {
        return this.paginatedData;
    }
    deselectAllRows(onlyPaginated = true) {
        const dataToDeleted = onlyPaginated ? this.paginatedData : this.data;
        dataToDeleted.forEach(row => this.deselectRow(row));
    }
}
//# sourceMappingURL=data:application/json;base64,